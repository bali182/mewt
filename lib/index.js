const multiRet=['push','pop','shift','unshift'],mutArrMethods=['reverse','sort','splice','fill','copyWithin'],nonMutArrMethods=['filter','map','concat','slice'];function mewt(a){const b=Array.isArray(a),c=b?(f)=>[].concat(f):(f)=>Object.assign({},f),d=(f)=>(...g)=>{const h=mutArrMethods.includes(f),i=nonMutArrMethods.includes(f),j=i?a:c(a),k=j[f](...g),l=h||i?mewt(k):k;return multiRet.includes(f)?[l,mewt(j)]:l},e={$set:(f,g)=>{const h=c(a);return h[f]=g,mewt(h)},$unset:(f)=>{const g=c(a);return delete g[f],mewt(g)}};if(!b&&'object'!=typeof a)throw new Error('mewt accepts array or object');return new Proxy(a,{set:()=>{throw new Error(`${b?'array':'object'} is immutable`)},get:(f,g)=>{return e[g]?e[g]:a[g]&&({}.hasOwnProperty.call(a,g)?a[g]:d(g))}})}module.exports=mewt;